---
- name: ClusterHAT usbboot provisioning
  hosts: clusterhat
  become: true
  gather_facts: true
  vars_files:
    - vars/usbboot.yml
  roles:
    - role: clusterhat_network
      when: inventory_hostname == 'clusterhat'
  tasks:
    - name: Get Cluster Status
      ansible.builtin.command: "{{ clusterctrl_bin }} status"
      register: cluster_status
      changed_when: false
      tags: ['usbboot','power','status']

    - name: Set cluster_power_status fact (reuse status output)
      ansible.builtin.set_fact:
        cluster_power_status: "{{ cluster_status }}"
      tags: ['usbboot','power']

    - name: Power off all zeros
      ansible.builtin.command: "{{ clusterctrl_bin }} off"
      become: true
      changed_when: false
      failed_when: false
      run_once: true
      tags: ['usbboot','power']

    - name: Refresh cluster status after power off
      ansible.builtin.command: "{{ clusterctrl_bin }} status"
      register: cluster_status_after_off
      changed_when: false
      tags: ['usbboot','power','status']

    - name: Update cluster_power_status with refreshed output
      ansible.builtin.set_fact:
        cluster_power_status: "{{ cluster_status_after_off }}"
      tags: ['usbboot','power','status']

    - name: Set up usbboot provisioning filesystem contents
      ansible.builtin.include_tasks: tasks/usbboot.yml
      tags: ['usbboot','provision']

    - name: Power on nodes
      ansible.builtin.command:
        argv: ["{{ clusterctrl_bin }}", "on", "p{{ zero_node | regex_search('[0-9]+') }}"]
      loop: "{{ groups['zerocluster'] }}"
      loop_control:
        loop_var: zero_node
      become: true
      when: power_on | default(true) | bool and
            ("p" + (zero_node | regex_search('[0-9]+')) + ":0") in cluster_power_status.stdout
      tags: ['usbboot','power']

    - name: Build list of zero IPs
      ansible.builtin.set_fact:
        zero_ips: >-
          {{ groups['zerocluster'] | map('extract', hostvars, 'ipaddr') | select('defined') | list }}
      run_once: true
      tags: ['usbboot','wait','ssh']

    - name: Wait for SSH on all zeros using until loop
      ansible.builtin.wait_for:
        host: "{{ item }}"
        port: 22
        timeout: 5
        state: started
      loop: "{{ zero_ips }}"
      register: ssh_probe
      until: ssh_probe is not failed
      retries: 60
      delay: 10
      when: (zero_ips | length) > 0
      tags: ['usbboot','wait','ssh']

    - name: Create SSH directory in user home
      ansible.builtin.file:
        path: "/var/lib/clusterctrl/nfs/p{{ zero_node | regex_search('[0-9]+') }}/home/{{ pi_user | default('pi') }}/.ssh"
        state: directory
        mode: '0700'
        owner: 1000
        group: 1000
      loop: "{{ groups['zerocluster'] }}"
      loop_control:
        loop_var: zero_node
      become: true
      when: cluster_public_ssh_key is defined

    - name: Create authorized_keys in user home
      ansible.builtin.copy:
        dest: "/var/lib/clusterctrl/nfs/p{{ zero_node | regex_search('[0-9]+') }}/home/{{ pi_user | default('pi') }}/.ssh/authorized_keys"
        content: "{{ cluster_public_ssh_key }}\n"
        mode: '0600'
        owner: 1000
        group: 1000
      loop: "{{ groups['zerocluster'] }}"
      loop_control:
        loop_var: zero_node
      become: true
      when: cluster_public_ssh_key is defined

    - name: Final status
      ansible.builtin.command:
        argv: ["{{ clusterctrl_bin }}", "status"]
      register: final_status
      changed_when: false
      become: true
      run_once: true
      tags: ['usbboot','status']

    - name: Summarize provisioning results
      ansible.builtin.debug:
        msg: >-
          Archive={{ usbboot_local_archive_path }} present={{ usbboot_archive_stat.stat.exists | default('n/a') }};
          Extracted nodes={{ groups['zerocluster'] | join(',') }}; Power managed={{ power_on | default(true) }}.
      run_once: true
      tags: ['usbboot','summary']

    - name: Show final status
      ansible.builtin.debug:
        var: final_status.stdout
      run_once: true
      tags: ['usbboot','status']

# vim: set ft=yaml.ansible ts=4 sw=2 tw=80 et :
